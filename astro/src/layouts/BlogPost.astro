---
import type { CollectionEntry } from 'astro:content';
import { type BlogPost } from '../utils/getPosts';
import FormattedDate from '../components/FormattedDate.astro';
import { Icon } from 'astro-icon/components';
import BaseLayout from './BaseLayout.astro';
import { getBlogPostLink } from '../utils/links';

type Props = CollectionEntry<'blog'>['data'] & {
	readingTime: { minutes: number; words: number };
	related: BlogPost[];
};

const { title, description, date, related, readingTime, tags } = Astro.props;
---

<BaseLayout meta={{ title, description }}>
	<body>
		<main>
			<article class="post">
				<div class="head">
					<h1>{title}</h1>

					<div class="meta">
						<span class="inline-container">
							<Icon name="fa6-solid:calendar" />
							<FormattedDate date={date} />
						</span>

						<span class="inline-container">
							<Icon name="fa6-solid:stopwatch" />
							<span>
								{Math.round(readingTime.minutes)} minutes to read
							</span>
						</span>
					</div>
				</div>

				<hr />

				<div class="body">
					<slot />
				</div>

				<hr />

				{
					tags && (
						<>
							<div class="body">
								<span>Tags: </span>
								{tags.map((tag, index) => (
									<>
										{index > 0 && ', '}
										{
											<a href={`/blog/tag/${tag}`} class="tag">
												{tag}
											</a>
										}
									</>
								))}
							</div>
						</>
					)
				}
			</article>

			{
				related.length > 0 && (
					<div class="related">
						<h3>Continue reading</h3>

						<ul>
							{/* {related.map((post) => (
								<li>
									<a href={getBlogPostLink(post.id)}>
										{post.data.title}
									</a>
								</li>
							))} */}
							{related.map((post) => (
								<li>
									<a
										href={getBlogPostLink(post.id)}
										class="related-post"
									>
										{post.data.heroImage && (
											<img {...post.data.heroImage} />
										)}
										<div class="related-postBody">
											<h4>{post.data.title}</h4>
											<div>{post.previewText}</div>
										</div>
									</a>
								</li>
							))}
						</ul>
					</div>
				)
			}
		</main>
	</body>
</BaseLayout>

<style>
	.post {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.head {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.meta {
		display: flex;
		flex-direction: row;
		gap: 1rem;

		font-size: 0.8em;
		color: #616768;
	}

	.inline-container {
		display: inline-flex;
		gap: 0.5em;
		align-items: baseline;
	}

	.tag {
		display: inline-flex;
		gap: 1px;
		align-items: center;
		vertical-align: bottom;

		&:before {
			content: "#"
		}
	}

	.body > p:first-child {
		margin-top: 0;
	}

	ul {
		margin: 0;
		padding: 0;
	}

	ul > li {
		list-style: none;
	}

	main {
		display: flex;
		flex-direction: column;
		gap: 3rem;
	}

	.related {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.related-post {
		display: flex;
		flex-direction: row;
		gap: 1rem;
		border: 1px solid;
		border-radius: 8px;
		padding: 1rem;
		background-color: #e6f9ff;
		border: 1px solid #b8e4ff;

		background-color: #f3fdff;
		border: 1px solid #d4efff;

		font-size: 16px;
		color: #000;

		@media (max-width: 600px) {
			flex-direction: column;
		}
	}
	.related-post img {
		/*   display: none; */
		width: 200px;
		height: fit-content;
		border-radius: 4px;
		aspect-ratio: 5/3;
		object-fit: cover;
		order: 1;
		flex-shrink: 0;
		background: #000;

		@media (max-width: 600px) {
			width: 100%;
			order: unset;
		}
	}
	ul {
		gap: 12px;
		display: flex;
		flex-direction: column;
	}
	.related-post,
	.related-post h4 {
		text-decoration: none;
	}
</style>
